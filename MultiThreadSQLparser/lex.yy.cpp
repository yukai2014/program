
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 273
#define YY_END_OF_BUFFER 274
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1187] =
    {   0,
        0,    0,    0,    0,    0,    0,  274,  272,  271,  271,
      237,  272,  266,  237,  237,  272,  237,  237,  237,  237,
      220,  220,  272,  240,  244,  241,  272,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  272,  237,  270,  270,  255,  242,    0,
      232,  230,    0,  266,  238,    0,  231,  229,    0,    0,
      220,    0,  222,    0,  268,  221,    0,    0,    0,  265,
      248,  245,  243,  246,  249,    0,  258,    0,    0,  255,
      255,  255,  255,    8,  255,    0,  255,  255,  255,  255,

       18,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,   84,  255,   86,
       95,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  129,  255,  134,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      191,  255,  255,  255,  255,  255,  255,  255,  255,  255,
        0,  255,  255,  255,    0,  257,    0,  239,  269,  255,
        0,    0,  230,    0,    0,    0,  229,    0,  267,    0,

      225,  221,    0,  235,    0,  223,  234,  247,    0,  262,
        0,  264,    0,  263,    1,    2,  255,  255,    6,    7,
        9,  255,    0,  255,  255,  255,  255,  255,   15,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,   47,  255,  255,  255,  255,  255,
       57,  255,  255,  255,  255,  255,  255,   64,  255,  255,
      255,  255,  255,  255,  255,   72,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,   92,
      255,  255,   98,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  122,  255,

      125,  255,  255,  255,  255,  255,  136,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      165,  255,  255,  255,  255,  255,  255,  172,  179,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  201,
      255,  255,  255,  255,  255,  255,  255,  255,    0,  215,
      255,  255,  256,    5,    0,  230,    0,  229,  267,    0,
      224,  259,  261,  260,  255,  255,  255,  236,  255,  255,
      255,  255,  255,   16,   17,   19,  255,   21,  255,   23,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,   41,  255,  255,  255,  255,  255,
      255,   52,  255,  255,  255,   59,   60,  255,   61,   62,
       65,  255,  255,   68,  255,  255,  255,  255,  255,  255,
       75,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  189,  167,   92,   13,  255,   94,  255,
       97,   99,  100,  255,  255,  103,  104,  255,  255,  107,
      255,  110,  111,  114,  255,  255,  255,  255,  255,  255,
      255,  255,  127,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  144,  146,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  166,  255,  168,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      185,  186,  187,  255,  255,  255,  255,  226,  194,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  210,  255,  255,  213,  255,  233,  216,  255,
        0,    0,    0,    0,    3,  255,  255,  255,  219,  255,
      255,  255,  255,  255,  255,   24,  255,  255,  255,  255,
      255,  255,  255,  254,  255,   33,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  228,   70,
       71,   73,  255,  255,   77,   78,  255,  255,  255,  255,
       98,  255,   88,   89,  255,  255,  255,  255,  255,  255,
      102,  105,  106,  255,  255,  255,  255,  116,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  135,  137,
      255,  255,  255,  255,  142,  143,  145,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  157,  148,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  182,  255,
      255,  255,  255,  255,  255,  255,  251,  195,  255,  255,

      255,  255,  255,  200,  202,  255,  255,  206,  255,  255,
      255,  211,  212,  214,  255,  255,  255,  255,   11,  255,
       14,  255,   22,  255,  255,   26,  255,  255,  255,  255,
      255,   32,  255,   38,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,   51,  255,  255,  255,   58,
      255,   63,  255,   67,  255,   71,  255,  255,   79,  255,
      255,  255,   85,   87,  255,   91,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      128,  255,  255,  132,  255,  255,  255,  255,  255,  148,
      255,  150,  151,  255,  255,  255,  155,  156,  158,  159,

      255,  162,  255,  255,  255,  169,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  196,  255,  197,  255,  199,  255,
      255,  206,  255,  255,  255,  255,  255,    4,  255,   12,
       20,  255,   25,   27,  255,  255,  255,   31,  255,  255,
      255,  255,  255,  255,  255,  255,  255,   47,   48,   49,
       50,  255,  255,  255,  255,   66,   69,   74,  255,  255,
      255,  255,  255,   92,  255,   96,  101,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  124,  255,   47,
      255,  255,  138,  255,  140,  255,  255,  149,  152,  153,

      255,  160,  255,  255,  255,  255,  170,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  250,  255,  255,  255,
      255,  255,  255,  193,  227,  255,  255,  255,  255,  208,
      209,  255,  255,  255,  255,  255,  255,   30,  255,   39,
       42,  255,  255,   43,  255,  255,  255,   53,  255,   55,
      255,   76,  255,  255,  255,  255,  255,   93,  255,  112,
      113,  255,  255,  255,  255,  255,  255,  255,  123,  255,
      131,  255,  255,  255,  255,  154,  255,  255,  255,  171,
      255,  174,  255,  255,  255,  255,  180,  255,  255,  255,
      255,  255,  190,  192,  198,  203,  204,  255,  255,  255,

      218,  255,   23,   28,  255,  255,  255,  255,   40,  252,
      253,  255,  255,  255,  255,  255,  130,  255,  255,  255,
      255,  255,  108,  255,  255,  118,  255,  118,  255,  255,
      255,  255,  139,  141,  255,  255,  163,  164,  255,  255,
      255,  255,  255,  255,  255,  183,  255,  188,  255,  207,
      255,  255,  255,   29,  255,  255,  255,  255,   45,   46,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  117,
      119,  255,  255,  255,  133,  147,  255,  255,  175,  255,
      255,  255,  255,  184,  255,  255,  217,  255,  255,  255,
      255,  255,  255,   56,  255,  255,   82,   83,   90,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,   34,   35,   37,  255,  255,  255,  255,
      255,  115,  255,  255,  255,  255,  173,  255,  255,  255,
      255,  255,  208,  255,  255,  255,   54,   80,  255,  255,
      255,  121,  255,  255,  255,  255,  255,  181,  205,   10,
      255,  255,  255,  109,  255,  255,  255,  176,  255,  255,
      255,   44,  255,  255,  255,  255,  255,  255,  255,   81,
      255,  255,  255,  255,  178,   36,  255,  255,  255,  255,
      120,  126,  161,  255,  177,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1207] =
    {   0,
        0,    0,  656,  653,   56,   57,  659, 2585, 2585, 2585,
      629,   83,    0, 2585,  609,   84,   78,  568,   84,  561,
      131,  100,  547,   65, 2585,   82,  118,   94,  134,  130,
      178,  190,  185,   65,  180,  230,   70,   94,  196,  246,
      238,  242,  135,   79,  262,  304,  296,  341,  139,  290,
      126,  158,  189,  305,  487, 2585,  552,  352, 2585,  286,
     2585,  562,  340,    0, 2585,  190, 2585,  556,  382,  386,
      413,  511,  420,  436, 2585,  443,  167,  465,    0, 2585,
     2585,  451, 2585, 2585, 2585,  473,  392,  469,  456,    0,
      194,  234,  438,  210,  221,  354,  455,  458,  242,  282,

        0,  405,  358,  467,  459,  292,  462,  464,  447,  301,
      353,  484,  366,  368,  485,  441,  506,  485,  482,  504,
      502,  506,  511,  523,  503,  520,  507,    0,  516,  554,
        0,  527,  524,  509,  524,  536,  564,  569,  527,  560,
      576,  575,  561,  566,  583,    0,  562,  581,  568,  611,
      582,  596,  655,  611,  613,  611,  620,  667,  615,  630,
      622,  675,  625,  627,  677,  642,  651,  701,  658,  675,
        0,  712,  711,  693,  726,  708,  716,  727,  709,  728,
        0,  720,  738,  723,  793, 2585,  443, 2585, 2585,  770,
      369,  769,  777,  799,  137,  657,  667,  796,    0,  793,

      799,  816,  841,  392,  822,  847,    0, 2585,  106, 2585,
      121, 2585,  178, 2585,    0,    0,  768,  764,    0,    0,
        0,  786,  861,  803,  810,  802,  820,  842,    0,  843,
      838,  837,  850,  842,  854,  847,  848,  861,  848,  862,
      845,  848,  868,  371,  867,  869,  899,  874,  882,  881,
        0,  901,  891,  899,  901,  906,  910,    0,  904,  917,
      900,  909,  903,  920,  923,  922,  913,  916,  917,  913,
      926,  929,  920,  924,  936,  936,  953,  938,  956,  981,
      944,  951,  950,  959,  973,  958,  974,  971,  976,  978,
      982,  977,  969,  346,  986,  983,  993,  978,  992,  981,

        0,  980,  992, 1014,  996, 1012, 1030, 1017, 1010, 1024,
     1022, 1034, 1035, 1033, 1035, 1036, 1041, 1038, 1023, 1031,
     1032, 1039, 1047, 1046, 1047, 1055, 1046, 1057, 1044, 1073,
        0, 1052, 1065, 1073, 1080, 1065, 1084, 1089,    0, 1075,
     1094, 1077, 1085, 1082, 1086, 1080, 1087, 1097, 1080, 1100,
     1106, 1106, 1100, 1103, 1107, 1117, 1124, 1134, 1129,    0,
     1125,  344, 1122, 1149, 1139, 1134, 1146, 1135,  379,    0,
     1138, 1143, 2585,    0,  416, 1167,  308,  659,    0, 1198,
     1205, 2585, 2585, 2585, 1155, 1151,  314, 2585, 1159, 1164,
     1174, 1187, 1186,    0,    0,    0, 1208,    0, 1203, 1210,

     1201, 1212, 1201, 1210, 1207, 1197, 1209, 1214, 1200, 1201,
     1203, 1218, 1209, 1223, 1206, 1248, 1215, 1228, 1210, 1210,
     1216, 1219, 1241, 1253, 1251,    0,    0, 1259,    0, 1260,
        0, 1254, 1251,    0, 1271, 1268, 1266, 1255, 1271, 1268,
        0, 1258, 1259, 1264, 1267,  301,  287, 1264, 1259, 1272,
     1268, 1267, 1275,    0,    0,    0,    0, 1307,    0, 1293,
        0,    0,    0, 1286, 1312,    0,    0, 1299, 1301,    0,
     1309,    0, 1324,    0, 1311, 1320, 1308, 1318, 1311, 1326,
     1315, 1316,    0, 1330, 1318, 1324, 1320, 1322, 1332, 1333,
     1344, 1342, 1346, 1341, 1334,    0, 1354, 1351, 1376, 1365,

     1378, 1382, 1375, 1367, 1368, 1376, 1368, 1384, 1369, 1378,
     1378, 1390, 1385, 1377,    0, 1384,    0, 1384, 1389, 1390,
     1376, 1382, 1402, 1431, 1389, 1401, 1391, 1425, 1420, 1427,
        0,    0, 1418, 1432, 1430, 1436,  311,    0,    0, 1430,
     1424, 1431, 1444, 1441, 1429, 1446, 1446, 1463, 1450, 1447,
     1449, 1449,    0, 1455, 1456,    0, 1463, 2585,  244, 1463,
     1427, 1510,  675, 1508,    0, 1466, 1484, 1489,    0, 1490,
     1479, 1475, 1497, 1497, 1500,    0, 1484, 1491, 1493, 1489,
     1492, 1497, 1495,    0, 1509,    0, 1501, 1498, 1516, 1509,
     1540, 1504, 1511, 1520, 1525, 1509, 1538, 1546, 1547, 1544,

     1544, 1544, 1555, 1558, 1556, 1558, 1545, 1556,    0,    0,
      446,    0, 1559, 1562,    0,    0, 1561, 1553, 1558, 1567,
        0, 1568,    0,    0, 1555, 1555, 1571, 1556, 1563, 1570,
        0,    0,    0, 1565, 1587, 1603, 1591,    0, 1597, 1606,
     1610, 1607, 1616, 1609, 1601, 1611, 1612, 1608,    0,    0,
     1611, 1605, 1607, 1622,    0,    0,    0, 1622, 1613, 1611,
     1626, 1612, 1630, 1616, 1626, 1622, 1636,    0,    0, 1626,
     1642, 1653, 1646, 1647, 1667, 1660, 1668, 1673, 1669, 1673,
     1676, 1660, 1670, 1679, 1668, 1673, 1676, 1666,    0, 1667,
     1673, 1668, 1675, 1685, 1682, 1687, 2585,    0, 1688, 1671,

     1688, 1686, 1696,    0,    0, 1714, 1715, 1706, 1712, 1726,
     1717,    0,    0,    0, 1719, 1724, 1729, 1721,    0, 1722,
        0, 1732,    0, 1718, 1734,    0, 1720, 1732, 1741, 1722,
     1725,    0, 1726,    0, 1728, 1735, 1745, 1729, 1730, 1770,
     1749, 1745, 1753, 1739, 1778,    0, 1781, 1776, 1786,    0,
     1789,    0, 1787,    0, 1778,    0, 1779, 1770,    0, 1777,
     1787, 1792,    0,    0, 1789,    0, 1781, 1799, 1796, 1796,
     1795, 1790, 1782, 1798, 1829, 1799,  241, 1805, 1803, 1796,
        0, 1814, 1814, 1840, 1837, 1834, 1822, 1827, 1836,    0,
     1846,    0,    0, 1847, 1848, 1851,    0,    0,    0, 1836,

      224,    0, 1847, 1837, 1844,    0, 1847, 1852, 1857, 1843,
     1850, 1858, 1854, 1867, 1859, 1866, 1891, 1888, 1895, 1897,
     1879, 1877, 1890, 1887,    0, 1892,    0, 1902,    0, 1888,
     1896,    0, 1909, 1893, 1905, 1898, 1902,    0, 1912,    0,
        0, 1911,    0,    0, 1902, 1910, 1915,    0,  220, 1916,
     1917, 1919, 1922, 1908, 1913, 1911, 1932,    0,    0,    0,
        0, 1949, 1942, 1937, 1938,    0,    0,    0, 1939, 1953,
     1960, 1961, 1945,    0, 1954,    0,    0, 1954, 1966, 1949,
     1955, 1959, 1958, 1968, 1961, 1965, 1958,    0, 1974,    0,
     1975, 1969,    0, 1967,    0, 1971, 1987,    0,    0,    0,

     1985,    0, 1999, 1992, 2000, 1996,    0, 2014, 2004, 2016,
     2013,  217, 2020, 2012, 2018, 2006, 2585, 2013, 2010, 2009,
     2017, 2011, 2025,    0,    0, 2029, 2030, 2031, 2019, 2037,
        0, 2025, 2028, 2024, 2029, 2034, 2049,    0, 2066, 2053,
        0,  237,  192,    0, 2058, 2054, 2061,    0, 2069, 2061,
     2075,    0, 2066, 2064, 2062, 2069, 2076,    0, 2083,    0,
        0, 2071, 2075, 2071, 2069, 2074, 2086, 2091,    0,  143,
        0, 2085, 2084, 2095, 2100,    0, 2097, 2116, 2110,    0,
     2110,    0, 2117, 2114,  133, 2121,    0,  124, 2129, 2112,
     2133, 2123,    0,    0,    0,    0, 2121, 2116, 2139, 2123,

        0, 2139,    0,    0, 2125, 2145, 2138, 2129,    0, 2585,
     2585, 2130, 2146, 2148, 2134, 2139,    0, 2137, 2141, 2138,
     2149, 2142, 2160, 2177, 2186,    0, 2169,    0, 2187, 2188,
     2174, 2170,    0,    0, 2177, 2194,    0,    0, 2189, 2192,
     2195, 2195,  122, 2192,  146,    0, 2199,    0, 2184,    0,
     2185, 2198, 2194,    0, 2189, 2197, 2206, 2207,    0,    0,
     2193, 2191, 2207, 2202, 2217, 2233, 2239, 2226, 2227,    0,
        0, 2230, 2234, 2237,    0,    0, 2235, 2239,    0, 2236,
     2241, 2239, 2243,    0, 2258, 2255,    0, 2256, 2257, 2258,
     2246, 2262, 2258,    0, 2248, 2264,    0,    0,    0, 2269,

     2246, 2257, 2260,   88, 2264, 2266, 2274, 2281, 2299, 2296,
     2293, 2289, 2296,    0, 2292,    0, 2297, 2310, 2289, 2312,
     2303,    0, 2298, 2314, 2317, 2301,    0, 2309, 2308, 2304,
     2311, 2310,    0, 2307, 2308, 2315,    0,    0, 2315, 2316,
     2332,    0, 2329, 2348, 2340, 2358, 2342,    0,    0,    0,
     2363, 2361, 2354,    0, 2366, 2356, 2368,    0,   79, 2360,
     2360,    0, 2370, 2360, 2364, 2362, 2360, 2359, 2364,    0,
     2367, 2368, 2370, 2370,    0,    0, 2382, 2380, 2384, 2367,
        0,    0,    0, 2376,    0, 2585, 2451, 2459, 2467, 2475,
     2481, 2484, 2491, 2498, 2506,  123, 2514, 2522, 2530,   86,

     2537, 2544, 2552, 2560, 2568, 2576
    } ;

static yyconst flex_int16_t yy_def[1207] =
    {   0,
     1186,    1, 1187, 1187,    1,    1, 1186, 1186, 1186, 1186,
     1186, 1188, 1189, 1186, 1186, 1190, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1191, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1193, 1186, 1186, 1186, 1192, 1186, 1188,
     1186, 1186, 1194, 1189, 1186, 1190, 1186, 1186, 1195, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1196, 1186,
     1186, 1186, 1186, 1186, 1186, 1197, 1191, 1198, 1199, 1192,
     1192, 1192, 1192, 1192, 1192, 1186, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1200, 1192, 1192, 1192, 1193, 1186, 1201, 1186, 1186, 1192,
     1202, 1188, 1188, 1194, 1203, 1190, 1190, 1195, 1204, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1196, 1186, 1197, 1186,
     1198, 1186, 1199, 1186, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1186, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1200, 1192,
     1192, 1192, 1186, 1192, 1205, 1202, 1206, 1203, 1204, 1186,
     1186, 1186, 1186, 1186, 1192, 1192, 1192, 1186, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1186, 1192, 1192,
     1202, 1205, 1203, 1206, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1186, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1186, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1186,
     1186, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192,    0, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186
    } ;

static yyconst flex_int16_t yy_nxt[2669] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    8,    8,   54,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   55,   58,   58,   61,   67,   62,   81,   82,
       83,  369,   70,   68,   71,   71,   71,   71,   71,   71,

       73,   73,   73,   73,   73,   73,   84,   85,  210,  124,
      382,  133,   58,   58,   76,   74,   71,   71,   71,   71,
       71,   71,   86,  212,   91,  134,  152,   88,  207,  135,
      383,   78,   92, 1167,   93,  181,   63,   69,  124,   94,
      133,   95, 1125,   96,   74,   76,   68,   71,   71,   71,
       71,   71,   71,   91,  134,  152,  917,  102,  135,   77,
       78,   92,   78,   93,  103,   97,  177,  182,   94,   98,
       95,  104,   99,   89,  105,  100, 1082,  106, 1044,  150,
      214,   79,  151,  204,  204,  101,  102, 1042,   77,  183,
      377,   78,   67,  103,   97,  177,  182, 1031,   98,   68,

      104,   99, 1011,  105,  100,  107,  106,  125,  150,  108,
       79,  151,  118,  109,  101,  126,  119,  113,  183,  110,
      184,  127,  111,  120,  215,  112,  121,  136,  114,  122,
      115,  137,  123,  384,  107,  116,  125,  138,  108,  221,
      117,  118,  109,   69,  126,  119,  113, 1010,  110,  184,
      127,  111,  120,  215,  112,  121,  136,  114,  122,  115,
      137,  123,  128,  129,  116,  143,  138,  222,  221,  117,
      130,  984,  216,  139,  939,  131,  132,  140,  903,  144,
      217,  141,  146,  230,  147,  145,  148,  142,   61,  149,
       62,  128,  129,  153,  143,  886,  222,  154,  715,  130,

      155,  216,  139,  156,  131,  132,  140,  186,  144,  217,
      141,  146,  230,  147,  145,  148,  142,  378,  149,  187,
      187,  697,  153,  167,  178,  179,  154,  168,  231,  155,
      169,  170,  156,  157,  180,  158,  242,  171,  159,   63,
      172,  619,   61,  160,  193,  161,  162,  163,  252,  164,
      165,  166,  167,  178,  179,  618,  168,  231,  187,  169,
      170,  564,  157,  180,  158,  242,  171,  159,  567,  172,
      223,  223,  160,   62,  161,  162,  163,  252,  164,  165,
      166,  173,   91,  174,   67,  234,  175,  176,  558,  235,
       92,  197,  190,  194,  253,  256, 1186,   94,  548,   95,

      475, 1186,   73,   73,   73,   73,   73,   73,  204,  204,
      173,   91,  174,  257,  234,  175,  176,   74,  235,   92,
      376,  190,  375,  253,  256,  416,   94,   76,   95,   71,
       71,   71,   71,   71,   71,  198,   73,   73,   73,   73,
       73,   73,  257,  232,   78,  186,   74, 1186,  200,  200,
      233,   74,  201,  201,  201,  201,  201,  201,  214,  202,
      202,  202,  202,  202,  202,  218,  756,  750,  219,  562,
      260,  212,  232,   78,  203,  210,  208,  205,  205,  233,
       74,  206,  206,  206,  206,  206,  206,  224,  225,  220,
      240,  227,  250,  245,  218,  251,  246,  219,  228,  260,

      241,  226,  247,  203,  229,  236,  237,  238,  243,  248,
      249,  254,  199,  244,  239,  258,  224,  225,  220,  240,
      227,  250,  245,  263,  251,  246,  255,  228,  264,  241,
      226,  247,  259,  229,  236,  237,  238,  243,  248,  249,
      254,  261,  244,  239,  258,  265,  266,  267,  262,  268,
      269,  271,  263,  272,  273,  255,  274,  264,  281,  282,
      283,  259,  284,  285,  270,  195,  191,  189,  286,  188,
      261,   80,   75,  295,  265,  266,  267,  262,  268,  269,
      271,   72,  272,  273,  275,  274,  276,  281,  282,  283,
      296,  284,  285,  270,  277,  278,  290,  286,  291,  279,

      280,  287,  295,  288,  289,  299,  297,  300,  305,  292,
      293,  306,  301,  275,  307,  276,  298,   65,  294,  296,
      302,  303,  304,  277,  278,  290,  311,  291,  279,  280,
      287,  312,  288,  289,  299,  297,  300,  305,  292,  293,
      306,  301,  308,  307,  323,  298,  309,  294,  324,  325,
      303,  304,  310,   59,  326,  311,  332,  333, 1186,   67,
      312,  334,  335,  338,   57,  339,   68,   57,  378,   67,
      342,  308, 1186,  323, 1186,  309,  378,  324,  325,  343,
     1186,  310,  313,  326,   68,  332,  333,  314,  315,  347,
      334,  335,  338,  316,  339,  317,  327,  318,  319,  342,

      320,  321,  336,  322,  340,  328,  337,  329,  343,  330,
       69,  313,  377,  331,  348,  349,  314,  315,  347, 1186,
       69,  341,  316,  358,  317,  327,  318,  319,  377,  320,
      321,  336,  322,  340,  328,  337,  329,  362,  330,  350,
      344,  353,  331,  348,  349,  345,  354,  351,  355,  356,
      341,  346,  358,  359,  363,  367,  357,  360,  365,  352,
      364,  361,  366,  368,  370,  371,  362,  372,  350,  344,
      353,   61, 1186,   62,  345,  354,  351,  355,  356,   61,
      346,  376,  359,  363,  367,  357,  360,  365,  352,  364,
      361,  366,  368,  370,  371,  186,  372,  218,   67,  385,

      374,   61,  386,  193, 1186,  197, 1186,  187,  187,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  220,   63, 1186, 1186, 1186,  218,  387,  385,  374,
       63,  386,  202,  202,  202,  202,  202,  202,  206,  206,
      206,  206,  206,  206,  389,  390,  187,  203,  373,  198,
      220,  391,  194,  380,  380,  392,  387,  381,  381,  381,
      381,  381,  381,  206,  206,  206,  206,  206,  206,  393,
      388,  394,  395,  389,  390,  396,  203,  223,  223,  397,
      391,  398,  399,  401,  392,  402,  400,  404,  409,  410,
      411,  405,  412,  413,  403,  414,  419, 1186,  393,  415,

      394,  395,  417,  422,  396,  418,  406,  407,  397,  408,
      398,  399,  401,  423,  402,  400,  404,  409,  410,  411,
      405,  412,  413,  403,  414,  419,  420,  424,  415,  425,
      421,  417,  422,  426,  418,  406,  407,  427,  408,  428,
      429,  430,  423,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  441,  440,  442,  420,  424,  443,  425,  421,
      444,  445,  426,  446,  447,  448,  427,  449,  428,  429,
      430,  450,  431,  432,  433,  434,  435,  436,  437,  438,
      439,  441,  440,  442,  451,  452,  443,  453,  460,  444,
      445,  461,  446,  447,  448,  462,  449,  463,  454,  455,

      450,  456,  457,  464,  466,  467,  468,  469,  470,  471,
      473,  474,  458,  451,  452,  476,  453,  460,  477,  472,
      461,  465,  459,  478,  462,  479,  463,  480,  481,  482,
      483,  486,  464,  466,  467,  468,  469,  470,  471,  473,
      474,  458,  484,  487,  476,  485,  490,  477,  472,  491,
      465,  459,  478,  492,  479,  493,  480,  481,  482,  483,
      486,  488,  489,  494,  497,  495,  498,  499,  500,  501,
      503,  484,  487,  496,  485,  490,  502,  504,  491,  505,
      506,  507,  492,  508,  493,  509,  510,  511,  512,  513,
      488,  489,  494,  497,  495,  498,  499,  500,  501,  503,

      514,  515,  496,  516,  517,  502,  504,  518,  505,  506,
      507,  519,  508,  520,  509,  510,  511,  512,  513,  525,
      521,  526,  527,  528,  529,  530,  531,  532,  533,  514,
      515,  534,  516,  517,  522,  535,  518,  538,  523,  536,
      519,  539,  520,  524,  540,  537,  541,  542,  525,  521,
      526,  527,  528,  529,  530,  531,  532,  533,  543,  544,
      534,  545,  546,  522,  535,  547,  538,  523,  536,  549,
      539,  376,  555,  540,  537,  541,  542,  550,  551,  553,
      556,  557,  559,  554,  560, 1186, 1186,  543,  544, 1186,
      545,  546, 1186, 1186,  547, 1186, 1186, 1186,  549,  565,

      552,  555,  566,  568,  569,  570,  550,  551,  553,  556,
      557,  559,  554,  560,  381,  381,  381,  381,  381,  381,
      375,  381,  381,  381,  381,  381,  381,  571,  565,  552,
      572,  566,  568,  569,  570,  573,  574,  575,  576,  577,
      578,  579,  580,  581,  582,  583,  584,  585,  586,  587,
      588,  589,  590, 1186,  595,  596,  571,  597, 1186,  572,
      591,  598,  599,  600,  573,  574,  575,  576,  577,  578,
      579,  580,  581,  582,  583,  584,  585,  586,  587,  588,
      589,  590,  592,  595,  596,  601,  597,  593,  602,  603,
      598,  599,  600,  594,  604,  605,  606,  607,  608,  609,

      610,  611,  612,  613,  614,  615,  616,  617,  620,  621,
      622,  592,  623,  624,  601,  625,  593,  602,  603,  626,
      629,  630,  594,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  620,  621,  622,
      627,  623,  624,  631,  625,  632,  633,  634,  626,  629,
      630,  628,  635,  637,  638,  639,  640,  641,  642,  643,
      644,  645,  646,  647,  649,  648,  650,  651,  652,  627,
      636,  653,  631,  654,  632,  633,  634,  655,  656,  657,
      628,  635,  637,  638,  639,  640,  641,  642,  643,  644,
      645,  646,  647,  649,  648,  650,  651,  652,  658,  636,

      653,  659,  654,  660,  661,  662,  655,  656,  657,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  658,  681,  682,
      659,   62,  660,  661,  662,  686,  687,  688,  663,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  689,  681,  682,  683,
      684,  690,  691,  692,  686,  687,  688,  693,  695,  696,
      698,  699,  700,  701,  702,  703,  685,  704,  694,  705,
      375,  708,  709,  710,  711,  689,  712,  713,  683,  684,
      690,  691,  692,  706,  714,  716,  693,  695,  696,  698,

      699,  700,  701,  702,  703,  685,  704,  694,  705,  707,
      708,  709,  710,  711,  376,  712,  713,  378,  717,  718,
      719,  720,  706,  714,  716,  457,  721,  722,  723,  724,
      725,  726, 1186,  727, 1186,  728,  729,  730,  707,  731,
      732,  733,  734,  735,  736,  739,  740,  717,  718,  719,
      720,  741,  742,  743,  457,  721,  722,  723,  724,  725,
      726,  564,  727,  562,  728,  729,  730,  737,  731,  732,
      733,  734,  735,  736,  739,  740,  744,  745,  746,  747,
      741,  742,  743,  748,  749,  738,  750,  751,  752,  753,
      754,  755,  757,  758,  759,  760,  737,  761,  763,  764,

      765,  766,  767,  762,  768,  744,  745,  746,  747,  769,
      770,  771,  748,  749,  738,  750,  751,  752,  753,  754,
      755,  757,  758,  759,  760,  772,  761,  763,  764,  765,
      766,  767,  762,  768,  773,  774,  775,  776,  769,  770,
      771,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  772,  790,  791,  792,  793,  794,
      795,  796,  797,  773,  774,  775,  776,  798,  799,  800,
      777,  778,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  788,  789,  801,  790,  791,  792,  793,  794,  795,
      796,  797,  802,  803,  804,  805,  798,  799,  800,  806,

      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  801,  819,  820,  821,  822,  823,  824,  825,
      826,  802,  803,  804,  805,  827,  828,  829,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  830,  819,  820,  821,  822,  823,  824,  825,  826,
      831,  832,  833,  834,  827,  828,  829,  835,  836,  837,
      838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      830,  848,  849,  850,  851,  852,  853,  854,  857,  831,
      832,  833,  834,  858,  859,  860,  835,  836,  837,  838,
      839,  840,  841,  842,  843,  844,  845,  846,  847,  855,

      848,  849,  850,  851,  852,  853,  854,  857,  861,  862,
      856,  863,  858,  859,  860,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  855,  877,
      878,  879,  880,  881,  885, 1186,  887,  861,  862,  856,
      863,  888,  889,  890,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  875,  876,  882,  877,  878,
      879,  880,  881,  885,  883,  887,  891,  892,  893,  894,
      888,  889,  890,  895,  896,  884,  897,  898,  899,  900,
      901,  902,  904,  905,  906,  907,  882,  908,  909,  910,
      911,  912,  913,  883,  914,  891,  892,  893,  894,  915,

      916,  917,  895,  896,  884,  897,  898,  899,  900,  901,
      902,  904,  905,  906,  907,  919,  908,  909,  910,  911,
      912,  913,  920,  914,  921,  454,  918,  922,  915,  916,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  932,
      933,  934,  935,  936,  919,  937,  938,  940,  941,  942,
      943,  920,  944,  921,  454,  918,  922,  945,  946,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  947,  937,  938,  940,  941,  942,  943,
      948,  944,  949,  950,  951,  952,  945,  946,  953,  954,
      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,

      955,  966,  947,  969,  967,  970,  971,  972,  973,  948,
      968,  949,  950,  951,  952,  974,  975,  953,  954,  956,
      957,  958,  959,  960,  961,  962,  963,  964,  965,  955,
      966,  976,  969,  967,  970,  971,  972,  973,  977,  968,
      978,  979,  455,  980,  974,  975,  981,  982,  983,  985,
      986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
      976,  996,  997,  998,  999, 1000, 1001,  977, 1002,  978,
      979,  455,  980, 1003, 1004,  981,  982,  983,  985,  986,
      987,  988,  989,  990,  991,  992,  993,  994,  995, 1005,
      996,  997,  998,  999, 1000, 1001, 1006, 1002, 1009, 1012,

     1013, 1014, 1003, 1004, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1007, 1008, 1023, 1024, 1025, 1026, 1005, 1027,
     1028, 1029, 1030, 1032, 1033, 1006, 1034, 1009, 1012, 1013,
     1014, 1035, 1036, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1007, 1008, 1023, 1024, 1025, 1026, 1037, 1027, 1028,
     1029, 1030, 1032, 1033, 1038, 1034, 1039, 1040, 1041, 1043,
     1035, 1036, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1037, 1059, 1060, 1061,
     1062, 1063, 1064, 1038, 1065, 1039, 1040, 1041, 1043, 1066,
     1067, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,

     1054, 1055, 1056, 1057, 1058, 1068, 1059, 1060, 1061, 1062,
     1063, 1064, 1069, 1065, 1070, 1071, 1072, 1073, 1066, 1067,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084,
     1085, 1086, 1087, 1088, 1068, 1089, 1090, 1091, 1092, 1093,
     1094, 1069, 1095, 1070, 1071, 1072, 1073, 1096, 1097, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085,
     1086, 1087, 1088, 1098, 1089, 1090, 1091, 1092, 1093, 1094,
     1099, 1095, 1100, 1101, 1102, 1103, 1096, 1097, 1104, 1105,
     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1098, 1118, 1119, 1120, 1121, 1122, 1123, 1099,

     1124, 1100, 1101, 1102, 1103, 1126, 1127, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1128, 1118, 1119, 1120, 1121, 1122, 1123, 1129, 1124,
     1130, 1131, 1132, 1133, 1126, 1127, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1128, 1148, 1149, 1150, 1151, 1152, 1153, 1129, 1154, 1130,
     1131, 1132, 1133, 1155, 1156, 1134, 1135, 1136, 1137, 1138,
     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1157,
     1148, 1149, 1150, 1151, 1152, 1153, 1158, 1154, 1159, 1160,
     1161, 1162, 1155, 1156, 1163, 1164, 1165, 1166, 1168, 1169,

     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1157, 1178,
     1179, 1180, 1181, 1182, 1183, 1158, 1184, 1159, 1160, 1161,
     1162, 1185, 1186, 1163, 1164, 1165, 1166, 1168, 1169, 1170,
     1171, 1172, 1173, 1174, 1175, 1176, 1177, 1186, 1178, 1179,
     1180, 1181, 1182, 1183, 1186, 1184, 1186, 1186, 1186, 1186,
     1185,   56,   56,   56,   56,   56,   56,   56,   56,   60,
       60,   60,   60,   60,   60,   60,   60,   64, 1186,   64,
       64,   64,   64,   64,   64,   66,   66,   66,   66,   66,
       66,   66,   66,   87,   87,   87,   87,   87,   87,   90,
       90,  185,  185,  185,  185,  185,  185,  185,  192,  192,

      192,  192,  192,  192,  192,  192,  196,  196,  196,  196,
      196,  196,  196,  196,  209,  209, 1186,  209,  209,  209,
      209,  209,  211,  211,  211,  211, 1186,  211,  211,  211,
      213,  213,  213,  213,  213,  213,  213,  187,  187,  187,
      187,  187,  187,  187,  191, 1186,  191,  191,  191,  191,
      191,  191,  195, 1186,  195,  195,  195,  195,  195,  195,
      379, 1186,  379,  379,  379,  379,  379,  379,  561, 1186,
      561,  561,  561,  561,  561,  561,  563, 1186,  563,  563,
      563,  563,  563,  563,    7, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186
    } ;

static yyconst flex_int16_t yy_chk[2669] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   24,   24,
       24, 1200,   17,   16,   17,   17,   17,   17,   17,   17,

       19,   19,   19,   19,   19,   19,   26,   26,  209,   34,
      209,   37,    5,    6,   22,   19,   22,   22,   22,   22,
       22,   22,   27,  211,   28,   38,   44,   27, 1196,   38,
      211,   22,   28, 1159,   28,   51,   12,   16,   34,   28,
       37,   28, 1104,   29,   19,   21,  195,   21,   21,   21,
       21,   21,   21,   28,   38,   44, 1045,   30,   38,   21,
       22,   28,   21,   28,   30,   29,   49,   51,   28,   29,
       28,   30,   29,   27,   30,   29, 1043,   30,  988,   43,
      213,   21,   43,   77,   77,   29,   30,  985,   21,   52,
      195,   21,   66,   30,   29,   49,   51,  970,   29,   66,

       30,   29,  943,   30,   29,   31,   30,   35,   43,   31,
       21,   43,   33,   31,   29,   35,   33,   32,   52,   31,
       53,   35,   31,   33,   91,   31,   33,   39,   32,   33,
       32,   39,   33,  213,   31,   32,   35,   39,   31,   94,
       32,   33,   31,   66,   35,   33,   32,  942,   31,   53,
       35,   31,   33,   91,   31,   33,   39,   32,   33,   32,
       39,   33,   36,   36,   32,   41,   39,   95,   94,   32,
       36,  912,   92,   40,  849,   36,   36,   40,  801,   41,
       92,   40,   42,   99,   42,   41,   42,   40,   60,   42,
       60,   36,   36,   45,   41,  777,   95,   45,  559,   36,

       45,   92,   40,   45,   36,   36,   40,   54,   41,   92,
       40,   42,   99,   42,   41,   42,   40,  377,   42,   54,
       54,  537,   45,   47,   50,   50,   45,   47,  100,   45,
       47,   47,   45,   46,   50,   46,  106,   47,   46,   60,
       47,  447,   63,   46,   63,   46,   46,   46,  110,   46,
       46,   46,   47,   50,   50,  446,   47,  100,   54,   47,
       47,  377,   46,   50,   46,  106,   47,   46,  387,   47,
       96,   96,   46,  191,   46,   46,   46,  110,   46,   46,
       46,   48,   58,   48,   69,  103,   48,   48,  369,  103,
       58,   69,   58,   63,  111,  113,   87,   58,  362,   58,

      294,   87,   70,   70,   70,   70,   70,   70,  204,  204,
       48,   58,   48,  114,  103,   48,   48,   70,  103,   58,
      375,   58,  191,  111,  113,  244,   58,   71,   58,   71,
       71,   71,   71,   71,   71,   69,   73,   73,   73,   73,
       73,   73,  114,  102,   71,  187,   70,   87,   74,   74,
      102,   73,   74,   74,   74,   74,   74,   74,   89,   76,
       76,   76,   76,   76,   76,   93,  611,  611,   93,  375,
      116,   88,  102,   71,   76,   86,   82,   78,   78,  102,
       73,   78,   78,   78,   78,   78,   78,   97,   97,   93,
      105,   98,  109,  108,   93,  109,  108,   93,   98,  116,

      105,   97,  108,   76,   98,  104,  104,  104,  107,  108,
      108,  112,   72,  107,  104,  115,   97,   97,   93,  105,
       98,  109,  108,  118,  109,  108,  112,   98,  119,  105,
       97,  108,  115,   98,  104,  104,  104,  107,  108,  108,
      112,  117,  107,  104,  115,  120,  121,  122,  117,  123,
      124,  125,  118,  126,  127,  112,  129,  119,  132,  133,
      134,  115,  135,  136,  124,   68,   62,   57,  136,   55,
      117,   23,   20,  139,  120,  121,  122,  117,  123,  124,
      125,   18,  126,  127,  130,  129,  130,  132,  133,  134,
      140,  135,  136,  124,  130,  130,  138,  136,  138,  130,

      130,  137,  139,  137,  137,  142,  141,  143,  147,  138,
      138,  148,  144,  130,  149,  130,  141,   15,  138,  140,
      144,  145,  145,  130,  130,  138,  151,  138,  130,  130,
      137,  152,  137,  137,  142,  141,  143,  147,  138,  138,
      148,  144,  150,  149,  154,  141,  150,  138,  155,  156,
      145,  145,  150,   11,  157,  151,  159,  160,    7,  196,
      152,  161,  161,  163,    4,  164,  196,    3,  378,  197,
      166,  150,    0,  154,    0,  150,  197,  155,  156,  167,
        0,  150,  153,  157,  563,  159,  160,  153,  153,  169,
      161,  161,  163,  153,  164,  153,  158,  153,  153,  166,

      153,  153,  162,  153,  165,  158,  162,  158,  167,  158,
      196,  153,  378,  158,  170,  170,  153,  153,  169,    0,
      197,  165,  153,  174,  153,  158,  153,  153,  563,  153,
      153,  162,  153,  165,  158,  162,  158,  176,  158,  172,
      168,  173,  158,  170,  170,  168,  173,  172,  173,  173,
      165,  168,  174,  175,  177,  179,  173,  175,  178,  172,
      177,  175,  178,  180,  182,  183,  176,  184,  172,  168,
      173,  192,    0,  192,  168,  173,  172,  173,  173,  193,
      168,  193,  175,  177,  179,  173,  175,  178,  172,  177,
      175,  178,  180,  182,  183,  185,  184,  190,  198,  217,

      190,  194,  218,  194,    0,  198,    0,  185,  185,  200,
      200,  200,  200,  200,  200,  201,  201,  201,  201,  201,
      201,  190,  192,    0,    0,    0,  190,  222,  217,  190,
      193,  218,  202,  202,  202,  202,  202,  202,  205,  205,
      205,  205,  205,  205,  224,  225,  185,  202,  185,  198,
      190,  226,  194,  203,  203,  227,  222,  203,  203,  203,
      203,  203,  203,  206,  206,  206,  206,  206,  206,  228,
      223,  230,  231,  224,  225,  232,  202,  223,  223,  233,
      226,  233,  234,  235,  227,  236,  234,  237,  239,  240,
      241,  238,  242,  242,  236,  243,  246,    0,  228,  243,

      230,  231,  245,  248,  232,  245,  238,  238,  233,  238,
      233,  234,  235,  249,  236,  234,  237,  239,  240,  241,
      238,  242,  242,  236,  243,  246,  247,  250,  243,  252,
      247,  245,  248,  253,  245,  238,  238,  254,  238,  255,
      256,  257,  249,  259,  260,  261,  261,  262,  263,  264,
      265,  266,  267,  266,  268,  247,  250,  269,  252,  247,
      270,  271,  253,  272,  273,  274,  254,  275,  255,  256,
      257,  276,  259,  260,  261,  261,  262,  263,  264,  265,
      266,  267,  266,  268,  277,  278,  269,  279,  281,  270,
      271,  282,  272,  273,  274,  283,  275,  284,  280,  280,

      276,  280,  280,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  280,  277,  278,  295,  279,  281,  296,  291,
      282,  285,  280,  297,  283,  298,  284,  299,  300,  302,
      303,  305,  285,  286,  287,  288,  289,  290,  291,  292,
      293,  280,  304,  306,  295,  304,  308,  296,  291,  309,
      285,  280,  297,  310,  298,  311,  299,  300,  302,  303,
      305,  307,  307,  312,  314,  313,  315,  316,  317,  318,
      319,  304,  306,  313,  304,  308,  318,  320,  309,  321,
      322,  323,  310,  324,  311,  325,  326,  327,  328,  329,
      307,  307,  312,  314,  313,  315,  316,  317,  318,  319,

      330,  332,  313,  333,  334,  318,  320,  335,  321,  322,
      323,  336,  324,  337,  325,  326,  327,  328,  329,  340,
      338,  341,  342,  343,  344,  345,  346,  347,  348,  330,
      332,  349,  333,  334,  338,  350,  335,  352,  338,  351,
      336,  353,  337,  338,  354,  351,  354,  355,  340,  338,
      341,  342,  343,  344,  345,  346,  347,  348,  356,  357,
      349,  358,  359,  338,  350,  361,  352,  338,  351,  363,
      353,  376,  366,  354,  351,  354,  355,  364,  364,  365,
      367,  368,  371,  365,  372,    0,    0,  356,  357,    0,
      358,  359,    0,    0,  361,    0,    0,    0,  363,  385,

      364,  366,  386,  389,  390,  391,  364,  364,  365,  367,
      368,  371,  365,  372,  380,  380,  380,  380,  380,  380,
      376,  381,  381,  381,  381,  381,  381,  392,  385,  364,
      393,  386,  389,  390,  391,  397,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  415,    0,  417,  418,  392,  419,    0,  393,
      415,  420,  421,  422,  397,  399,  400,  401,  402,  403,
      404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  418,  423,  419,  416,  424,  425,
      420,  421,  422,  416,  428,  430,  432,  433,  435,  436,

      437,  438,  439,  440,  442,  443,  444,  445,  448,  449,
      450,  416,  451,  452,  423,  453,  416,  424,  425,  453,
      460,  464,  416,  428,  430,  432,  433,  435,  436,  437,
      438,  439,  440,  442,  443,  444,  445,  448,  449,  450,
      458,  451,  452,  465,  453,  468,  469,  471,  453,  460,
      464,  458,  473,  475,  476,  477,  478,  479,  480,  481,
      482,  484,  485,  486,  487,  486,  488,  489,  490,  458,
      473,  491,  465,  492,  468,  469,  471,  493,  494,  495,
      458,  473,  475,  476,  477,  478,  479,  480,  481,  482,
      484,  485,  486,  487,  486,  488,  489,  490,  497,  473,

      491,  498,  492,  499,  500,  501,  493,  494,  495,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  516,  518,  519,  520,  521,  497,  522,  523,
      498,  561,  499,  500,  501,  525,  526,  527,  502,  503,
      504,  505,  506,  507,  508,  509,  510,  511,  512,  513,
      514,  516,  518,  519,  520,  521,  528,  522,  523,  524,
      524,  529,  530,  533,  525,  526,  527,  534,  535,  536,
      540,  541,  542,  543,  544,  545,  524,  546,  534,  547,
      561,  549,  550,  551,  552,  528,  554,  555,  524,  524,
      529,  530,  533,  548,  557,  560,  534,  535,  536,  540,

      541,  542,  543,  544,  545,  524,  546,  534,  547,  548,
      549,  550,  551,  552,  562,  554,  555,  564,  566,  567,
      568,  570,  548,  557,  560,  571,  572,  573,  574,  575,
      577,  578,    0,  579,    0,  580,  581,  582,  548,  583,
      585,  587,  588,  589,  590,  592,  593,  566,  567,  568,
      570,  594,  595,  596,  571,  572,  573,  574,  575,  577,
      578,  564,  579,  562,  580,  581,  582,  591,  583,  585,
      587,  588,  589,  590,  592,  593,  597,  598,  599,  600,
      594,  595,  596,  601,  602,  591,  603,  604,  605,  606,
      607,  608,  613,  614,  617,  618,  591,  619,  620,  622,

      625,  626,  627,  619,  628,  597,  598,  599,  600,  629,
      630,  634,  601,  602,  591,  603,  604,  605,  606,  607,
      608,  613,  614,  617,  618,  635,  619,  620,  622,  625,
      626,  627,  619,  628,  636,  637,  639,  640,  629,  630,
      634,  641,  642,  643,  644,  645,  646,  647,  648,  651,
      652,  653,  654,  658,  635,  659,  660,  661,  662,  663,
      664,  665,  666,  636,  637,  639,  640,  667,  670,  671,
      641,  642,  643,  644,  645,  646,  647,  648,  651,  652,
      653,  654,  658,  672,  659,  660,  661,  662,  663,  664,
      665,  666,  673,  674,  675,  676,  667,  670,  671,  677,

      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      688,  690,  672,  691,  692,  693,  694,  695,  696,  699,
      700,  673,  674,  675,  676,  701,  702,  703,  677,  678,
      679,  680,  681,  682,  683,  684,  685,  686,  687,  688,
      690,  706,  691,  692,  693,  694,  695,  696,  699,  700,
      707,  708,  709,  710,  701,  702,  703,  711,  715,  716,
      717,  718,  720,  722,  724,  725,  727,  728,  729,  730,
      706,  731,  733,  735,  736,  737,  738,  739,  741,  707,
      708,  709,  710,  742,  743,  744,  711,  715,  716,  717,
      718,  720,  722,  724,  725,  727,  728,  729,  730,  740,

      731,  733,  735,  736,  737,  738,  739,  741,  745,  747,
      740,  748,  742,  743,  744,  749,  751,  753,  755,  757,
      758,  760,  761,  762,  765,  767,  768,  769,  740,  770,
      771,  772,  773,  774,  776,    0,  778,  745,  747,  740,
      748,  779,  780,  782,  749,  751,  753,  755,  757,  758,
      760,  761,  762,  765,  767,  768,  769,  775,  770,  771,
      772,  773,  774,  776,  775,  778,  783,  784,  785,  786,
      779,  780,  782,  787,  788,  775,  789,  791,  794,  795,
      796,  800,  803,  804,  805,  807,  775,  808,  809,  810,
      811,  812,  813,  775,  814,  783,  784,  785,  786,  815,

      816,  817,  787,  788,  775,  789,  791,  794,  795,  796,
      800,  803,  804,  805,  807,  818,  808,  809,  810,  811,
      812,  813,  819,  814,  820,  821,  817,  822,  815,  816,
      823,  824,  826,  828,  830,  831,  833,  834,  835,  836,
      837,  839,  842,  845,  818,  846,  847,  850,  851,  852,
      853,  819,  854,  820,  821,  817,  822,  855,  856,  823,
      824,  826,  828,  830,  831,  833,  834,  835,  836,  837,
      839,  842,  845,  857,  846,  847,  850,  851,  852,  853,
      862,  854,  863,  864,  865,  869,  855,  856,  870,  871,
      872,  873,  875,  878,  879,  880,  881,  882,  883,  884,

      871,  885,  857,  887,  886,  889,  891,  892,  894,  862,
      886,  863,  864,  865,  869,  896,  897,  870,  871,  872,
      873,  875,  878,  879,  880,  881,  882,  883,  884,  871,
      885,  901,  887,  886,  889,  891,  892,  894,  903,  886,
      904,  905,  906,  908,  896,  897,  909,  910,  911,  913,
      914,  915,  916,  918,  919,  920,  921,  922,  923,  926,
      901,  927,  928,  929,  930,  932,  933,  903,  934,  904,
      905,  906,  908,  935,  936,  909,  910,  911,  913,  914,
      915,  916,  918,  919,  920,  921,  922,  923,  926,  937,
      927,  928,  929,  930,  932,  933,  939,  934,  940,  945,

      946,  947,  935,  936,  949,  950,  951,  953,  954,  955,
      956,  957,  939,  939,  959,  962,  963,  964,  937,  965,
      966,  967,  968,  972,  973,  939,  974,  940,  945,  946,
      947,  975,  977,  949,  950,  951,  953,  954,  955,  956,
      957,  939,  939,  959,  962,  963,  964,  978,  965,  966,
      967,  968,  972,  973,  979,  974,  981,  983,  984,  986,
      975,  977,  989,  990,  991,  992,  997,  998,  999, 1000,
     1002, 1005, 1006, 1007, 1008, 1012,  978, 1013, 1014, 1015,
     1016, 1018, 1019,  979, 1020,  981,  983,  984,  986, 1021,
     1022,  989,  990,  991,  992,  997,  998,  999, 1000, 1002,

     1005, 1006, 1007, 1008, 1012, 1023, 1013, 1014, 1015, 1016,
     1018, 1019, 1024, 1020, 1025, 1027, 1029, 1030, 1021, 1022,
     1031, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1047,
     1049, 1051, 1052, 1053, 1023, 1055, 1056, 1057, 1058, 1061,
     1062, 1024, 1063, 1025, 1027, 1029, 1030, 1064, 1065, 1031,
     1032, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1047, 1049,
     1051, 1052, 1053, 1066, 1055, 1056, 1057, 1058, 1061, 1062,
     1067, 1063, 1068, 1069, 1072, 1073, 1064, 1065, 1074, 1077,
     1078, 1080, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1090,
     1091, 1092, 1066, 1093, 1095, 1096, 1100, 1101, 1102, 1067,

     1103, 1068, 1069, 1072, 1073, 1105, 1106, 1074, 1077, 1078,
     1080, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1090, 1091,
     1092, 1107, 1093, 1095, 1096, 1100, 1101, 1102, 1108, 1103,
     1109, 1110, 1111, 1112, 1105, 1106, 1113, 1115, 1117, 1118,
     1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130,
     1107, 1131, 1132, 1134, 1135, 1136, 1139, 1108, 1140, 1109,
     1110, 1111, 1112, 1141, 1143, 1113, 1115, 1117, 1118, 1119,
     1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1144,
     1131, 1132, 1134, 1135, 1136, 1139, 1145, 1140, 1146, 1147,
     1151, 1152, 1141, 1143, 1153, 1155, 1156, 1157, 1160, 1161,

     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1144, 1172,
     1173, 1174, 1177, 1178, 1179, 1145, 1180, 1146, 1147, 1151,
     1152, 1184,    0, 1153, 1155, 1156, 1157, 1160, 1161, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1171,    0, 1172, 1173,
     1174, 1177, 1178, 1179,    0, 1180,    0,    0,    0,    0,
     1184, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,    0, 1189,
     1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191, 1191, 1192,
     1192, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194,

     1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1197, 1197,    0, 1197, 1197, 1197,
     1197, 1197, 1198, 1198, 1198, 1198,    0, 1198, 1198, 1198,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1202,    0, 1202, 1202, 1202, 1202,
     1202, 1202, 1203,    0, 1203, 1203, 1203, 1203, 1203, 1203,
     1204,    0, 1204, 1204, 1204, 1204, 1204, 1204, 1205,    0,
     1205, 1205, 1205, 1205, 1205, 1205, 1206,    0, 1206, 1206,
     1206, 1206, 1206, 1206, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[274] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sql.l"
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/glrmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset, GLR version
 */
#line 14 "sql.l"
#include "sql_node_struct.h"
#include "sql.tab.hpp"

#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdio.h>
#include <malloc.h>

extern "C" int yylex();

int oldstate;


extern pthread_mutex_t mutex;
extern char globalInputText[10000];
int numToRead = 0;
int isfirst = 0;
int myinput(char * buf, int max)
{
	if(!numToRead) return 0;
	if (strlen(globalInputText) < max) max = strlen(globalInputText);
	max = strlen(globalInputText);
	memcpy(buf, globalInputText, max);
	numToRead -= max;
	cout<<"isfirst is "<<isfirst<<endl;
	//if (!isfirst)
	{
		pthread_mutex_unlock(&mutex);
		cout<<"unlock"<<endl;
		isfirst = !isfirst;
	}
	return max;
}

#define YY_INPUT(buf, result, max) (result = myinput(buf, max))



#line 1518 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 57 "sql.l"


  /* keywords */

#line 1707 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1187 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2585 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "sql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "sql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "sql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "sql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 69 "sql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 70 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 71 "sql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "sql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 73 "sql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 74 "sql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "sql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "sql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "sql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "sql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "sql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "sql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "sql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "sql.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "sql.l"
{ return CALL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "sql.l"
{ return CASCADE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 85 "sql.l"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 86 "sql.l"
{ return CHANGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "sql.l"
{ return CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 88 "sql.l"
{ return CHECK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 89 "sql.l"
{ return COLLATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "sql.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 91 "sql.l"
{ return COMMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "sql.l"
{ return CONDITION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "sql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "sql.l"
{ return CONTINUE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "sql.l"
{ return CONVERT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 96 "sql.l"
{ return CREATE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 97 "sql.l"
{ return CROSS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 98 "sql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "sql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "sql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "sql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "sql.l"
{ return CURSOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "sql.l"
{ return DATABASE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 104 "sql.l"
{ return DATABASES; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 105 "sql.l"
{ return DATE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 106 "sql.l"
{ return DATETIME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 107 "sql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "sql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "sql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 110 "sql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 111 "sql.l"
{ return DECIMAL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 112 "sql.l"
{ return DECLARE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "sql.l"
{ return DEFAULT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 114 "sql.l"
{ return DELAYED; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 115 "sql.l"
{ return DELETE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 116 "sql.l"
{ return DESC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 117 "sql.l"
{ return DESCRIBE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 118 "sql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 119 "sql.l"
{ return DISTINCT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 120 "sql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 121 "sql.l"
{ return DIV; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 122 "sql.l"
{ return DOUBLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 123 "sql.l"
{ return DROP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 124 "sql.l"
{ return DUAL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 125 "sql.l"
{ return EACH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 126 "sql.l"
{ return ELSE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 127 "sql.l"
{ return ELSEIF; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 128 "sql.l"
{ return END; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 129 "sql.l"
{ return ENUM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 130 "sql.l"
{ return ESCAPED; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 131 "sql.l"
{ return EXISTS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 132 "sql.l"
{ return EXIT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 133 "sql.l"
{ return EXPLAIN; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 134 "sql.l"
{ return FETCH; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 135 "sql.l"
{ return FLOAT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 136 "sql.l"
{ return FOR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 137 "sql.l"
{ return FORCE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 138 "sql.l"
{ return FOREIGN; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 139 "sql.l"
{ return FROM; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 140 "sql.l"
{ return FULLTEXT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 141 "sql.l"
{ return GRANT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 142 "sql.l"
{ return GROUP; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 143 "sql.l"
{ return HAVING; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 144 "sql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 145 "sql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 146 "sql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 147 "sql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 148 "sql.l"
{ return IF; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 149 "sql.l"
{ return IGNORE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 150 "sql.l"
{ return IN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 151 "sql.l"
{ return INFILE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 152 "sql.l"
{ return INNER; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 153 "sql.l"
{ return INOUT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 154 "sql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 155 "sql.l"
{ return INSERT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 156 "sql.l"
{ return INTEGER; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 157 "sql.l"
{ return INTERVAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 158 "sql.l"
{ return INTO; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 159 "sql.l"
{ return IS; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 160 "sql.l"
{ return ITERATE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 161 "sql.l"
{ return JOIN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 162 "sql.l"
{ return KEY; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 163 "sql.l"
{ return KEYS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 164 "sql.l"
{ return KILL; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 165 "sql.l"
{ return LEADING; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 166 "sql.l"
{ return LEAVE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 167 "sql.l"
{ return LEFT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 168 "sql.l"
{ return LIKE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "sql.l"
{ return LIMIT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 170 "sql.l"
{ return LINES; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 171 "sql.l"
{ return LOAD; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 172 "sql.l"
{ return LOCALTIME; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 173 "sql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 174 "sql.l"
{ return LOCK; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 175 "sql.l"
{ return LONG; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 176 "sql.l"
{ return LONGBLOB; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 177 "sql.l"
{ return LONGTEXT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 178 "sql.l"
{ return LOOP; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 179 "sql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 180 "sql.l"
{ return MATCH; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 181 "sql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "sql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 183 "sql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "sql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "sql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "sql.l"
{ return MOD; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "sql.l"
{ return MODIFIES; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "sql.l"
{ return NATURAL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "sql.l"
{ return NOT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "sql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "sql.l"
{ return NULLX; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 192 "sql.l"
{ return NUMBER; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "sql.l"
{ return ON; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "sql.l"
{ return DUPLICATE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "sql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "sql.l"
{ return OPTION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "sql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "sql.l"
{ return OR; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "sql.l"
{ return ORDER; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "sql.l"
{ return OUT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "sql.l"
{ return OUTER; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "sql.l"
{ return OUTFILE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "sql.l"
{ return PRECISION; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "sql.l"
{ return PRIMARY; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "sql.l"
{ return PROCEDURE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "sql.l"
{ return PURGE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "sql.l"
{ return QUICK; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "sql.l"
{ return READ; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "sql.l"
{ return READS; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "sql.l"
{ return REAL; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 211 "sql.l"
{ return REFERENCES; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "sql.l"
{ return REGEXP; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 213 "sql.l"
{ return RELEASE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "sql.l"
{ return RENAME; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 215 "sql.l"
{ return REPEAT; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "sql.l"
{ return REPLACE; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "sql.l"
{ return REQUIRE; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "sql.l"
{ return RESTRICT; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 219 "sql.l"
{ return RETURN; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 220 "sql.l"
{ return REVOKE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 221 "sql.l"
{ return RIGHT; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 222 "sql.l"
{ return ROLLUP; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "sql.l"
{ return SCHEMA; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 224 "sql.l"
{ return SCHEMAS; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "sql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "sql.l"
{ return SELECT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "sql.l"
{ return SENSITIVE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "sql.l"
{ return SEPARATOR; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "sql.l"
{ return SET; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "sql.l"
{ return SHOW; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "sql.l"
{ return SMALLINT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 232 "sql.l"
{ return SOME; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "sql.l"
{ return SONAME; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "sql.l"
{ return SPATIAL; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "sql.l"
{ return SPECIFIC; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "sql.l"
{ return SQL; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "sql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "sql.l"
{ return SQLSTATE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "sql.l"
{ return SQLWARNING; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "sql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 241 "sql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "sql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "sql.l"
{ return SSL; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 244 "sql.l"
{ return STARTING; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 245 "sql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 246 "sql.l"
{ return TABLE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 247 "sql.l"
{ return TEMPORARY; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 248 "sql.l"
{ return TERMINATED; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "sql.l"
{ return TEXT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 250 "sql.l"
{ return THEN; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "sql.l"
{ return TIME; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 252 "sql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "sql.l"
{ return TINYINT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 254 "sql.l"
{ return TINYTEXT; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 255 "sql.l"
{ return TO; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 256 "sql.l"
{ return TRAILING; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 257 "sql.l"
{ return TRIGGER; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 258 "sql.l"
{ return UNDO; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 259 "sql.l"
{ return UNION; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 260 "sql.l"
{ return UNIQUE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 261 "sql.l"
{ return UNLOCK; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 262 "sql.l"
{ return UNSIGNED; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 263 "sql.l"
{ return UPDATE; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 264 "sql.l"
{ return USAGE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 265 "sql.l"
{ return USE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 266 "sql.l"
{ return USING; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 267 "sql.l"
{ return UTC_DATE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 268 "sql.l"
{ return UTC_TIME; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 269 "sql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 270 "sql.l"
{ return VALUES; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 271 "sql.l"
{ return VARBINARY; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 272 "sql.l"
{ return VARCHAR; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 273 "sql.l"
{ return VARYING; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 274 "sql.l"
{ return WHEN; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 275 "sql.l"
{ return WHERE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 276 "sql.l"
{ return WHILE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 277 "sql.l"
{ return WITH; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 278 "sql.l"
{ return WRITE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 279 "sql.l"
{ return XOR; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 280 "sql.l"
{ return YEAR; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 281 "sql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 282 "sql.l"
{ return ZEROFILL; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 283 "sql.l"
{ return BEGINT; }
	YY_BREAK
/* numbers */
case 220:
YY_RULE_SETUP
#line 287 "sql.l"
{ yylval.intval = atoi(yytext); return INTNUM; } 
	YY_BREAK
case 221:
#line 290 "sql.l"
case 222:
#line 291 "sql.l"
case 223:
#line 292 "sql.l"
case 224:
#line 293 "sql.l"
case 225:
YY_RULE_SETUP
#line 293 "sql.l"
{ yylval.floatval = atof(yytext) ;
                                  return APPROXNUM; }
	YY_BREAK
/* booleans */
case 226:
YY_RULE_SETUP
#line 296 "sql.l"
{ yylval.intval = 1; return BOOL; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 297 "sql.l"
{ yylval.intval = -1; return BOOL; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 298 "sql.l"
{ yylval.intval = 0; return BOOL; }
	YY_BREAK
/* strings */
case 229:
#line 303 "sql.l"
case 230:
YY_RULE_SETUP
#line 303 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 231:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 305 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 232:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 306 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 233:
#line 310 "sql.l"
case 234:
YY_RULE_SETUP
#line 310 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 235:
#line 315 "sql.l"
case 236:
YY_RULE_SETUP
#line 315 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 237:
YY_RULE_SETUP
#line 319 "sql.l"
{ return yytext[0]; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 321 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 322 "sql.l"
{ return OR; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 324 "sql.l"
{ yylval.subtok = 1; return COMPARISON; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 325 "sql.l"
{ yylval.subtok = 2; return COMPARISON; }
	YY_BREAK
case 242:
#line 327 "sql.l"
case 243:
YY_RULE_SETUP
#line 327 "sql.l"
{ yylval.subtok = 3; return COMPARISON; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 328 "sql.l"
{ yylval.subtok = 4; return COMPARISON; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 329 "sql.l"
{ yylval.subtok = 5; return COMPARISON; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 330 "sql.l"
{ yylval.subtok = 6; return COMPARISON; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 331 "sql.l"
{ yylval.subtok = 12; return COMPARISON; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 333 "sql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 334 "sql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 250:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 338 "sql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 251:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 339 "sql.l"
{ return FTRIM; }
	YY_BREAK
case 252:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "sql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 253:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 341 "sql.l"
{ return FDATE_SUB; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
case 254:
YY_RULE_SETUP
#line 346 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FCOUNT;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 351 "sql.l"
{ yylval.strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 353 "sql.l"
{ yylval.strval = strdup(yytext+1);
                          yylval.strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 357 "sql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 258:
#line 361 "sql.l"
case 259:
#line 362 "sql.l"
case 260:
#line 363 "sql.l"
case 261:
YY_RULE_SETUP
#line 363 "sql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 262:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 365 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 263:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 366 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 264:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 367 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 370 "sql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 266:
YY_RULE_SETUP
#line 373 "sql.l"
;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 374 "sql.l"
;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 376 "sql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 377 "sql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 378 "sql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 379 "sql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 382 "sql.l"
/* white space */
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 383 "sql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 385 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3191 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1187 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1187 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1186);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 385 "sql.l"




